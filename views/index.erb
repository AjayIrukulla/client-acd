<!DOCTYPE html>
<html>
  <head>
    <title>Twilio SFDC Client</title>
    <script type="text/javascript"
      src="https://static.twilio.com/libs/twiliojs/1.1/twilio.min.js"></script>
    <script type="text/javascript"
      src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    </script>
    <!--script src="http://jquery-websocket.googlecode.com/files/jquery.websocket-0.0.1.js"></script-->
    
    <script src="https://na15.salesforce.com/support/api/27.0/interaction.js"></script>
    <script src="https://na15.salesforce.com/support/console/27.0/integration.js"></script>

    <link href="/css/twiliosfdc.css"
      type="text/css" rel="stylesheet" />
    <link href="/css/softphone.css"
      type="text/css" rel="stylesheet" />
    <script type="text/javascript">

    /* variablees */
     // State variables
    var callStartTime = null;
    var calledType = null;    
    var callNumber = null
    var answeredCallOffered = null; //tracks if the agent answered a call offered to them


    $(function() {
        $(".Button").bind('click',function(){
                  if($(this).attr('Value')=='0+'){
                     $("#number").val($("#number").val()+'0');
                  } else {
                    $("#number").val($("#number").val()+$(this).attr('Value'));
                  }
              });

    });


       var wsaddress = 'ws://' + window.location.host  + "?clientname=<%= client_name %>"
       //var wsaddress = "ws://macbook.ngrok.com?clientname=<%= client_name %>"
       var ws = new WebSocket(wsaddress);
       //alert(wsaddress);
        //var wsaddress = 'ws://localhost:4567?uname=test1';
        //var ws       = new WebSocket(wsaddress);
        

        ws.onopen    = function()  { console.log('websocket opened'); };
        ws.onclose   = function()  { console.log('websocket closed'); }
        ws.onmessage = function(m) { conole.log('websocket message: ' +  m.data); };

    
    /******** TWILIO STUFF ***********************/
    /* Create the Client with a Capability Token */
    Twilio.Device.setup("<%= token %>", {debug: true});
 
    Twilio.Device.ready(function (device) {
      //$("#log").text("Client '<%= client_name %>' is ready");
       sforce.interaction.cti.enableClickToDial();       
       sforce.interaction.cti.onClickToDial(startCall); 

                
      ready();
    });

    Twilio.Device.offline(function (device) {
      //$("#log").text("Client '<%= client_name %>' is NOT ready");
      sforce.interaction.cti.disableClickToDial(); 
      notready();

    });

 
    /* Report any errors on the screen */
    Twilio.Device.error(function (error) {
        $("#log").text("Error: " + error.message);
    });

   /* Log a message when a call disconnects. */
    Twilio.Device.disconnect(function (conn) {
        $("#log").text("Call ended");

        sforce.interaction.getPageInfo(saveLog);
        callNumber = null;
        //set up ready/notready status here
        $("#answercall").unbind('click');
   
        ready();
    });
 
    Twilio.Device.connect(function (conn) {
		    $("#log").text("OnCall with " + conn.parameters.From);
        $("#log").css("background","blue");
        $("#answercall").css("background-color", "#ececec" )
    });

    /* Listen for incoming connections */
    Twilio.Device.incoming(function (conn) {

      answeredCallOffered = "Ringing";
      $("#log").text("CALL FROM: " + conn.parameters.From);
      $("#answercall").css("display", "inline");
      $("#answercall").css("background","yellow");

      var inboundnum = cleanInboundTwilioNumber(conn.parameters.From);
      sforce.interaction.searchAndScreenPop(inboundnum, '','inbound');

      $("#answercall").click( 
        function () {
          if (answeredCallOffered == "Ringing") {
              answeredCallOffered = "Answered"
            }
          //now answer the call  
          conn.accept();
      });

    }); 

    Twilio.Device.cancel(function(conn) {
        console.log(conn.parameters.From); // who canceled the call
        conn.status // => "closed"
        $("#answercall").unbind('click');
        $("#answercall").css("background-color", "#ececec");
        showstatus();


    });

   	Twilio.Device.presence( function (presenceEvent) {
	     //console.log("Presence Event: " + presenceEvent.from + " " + presenceEvent.available);
	     //alert("Presence Event: " + presenceEvent.from + " " + presenceEvent.available)
  	});
    


/******** CUSTOME CTI ADAPTER STUFF ***********************/
    
    function answercall () {

     

    }

    function call() {
      // get the phone number to connect the call to
      params = {"PhoneNumber": $("#number").val()};
      Twilio.Device.connect(params);
    }

	 function callqueue () {
	  	Twilio.Device.connect({
		  	"queue" : $("#number").val()
		  });
	 }

	/* A function to end a connection to Twilio. */
	function hangup() {
         Twilio.Device.disconnectAll();
	}

	function notready () {
		//alert("going not ready");		
       $.get("/track", { "from":"<%= client_name %>", "status":"NotReady" }, function(data) {
       showstatus();
		});
  }

  function ready () {
    //alert("going not ready");   
       $.get("/track", { "from":"<%= client_name %>", "status":"Ready" }, function(data) {
       showstatus();

    });
      	  
	}

  function getlongestidle () {
       
       $.get("/longestidle", {}, function(data) {
       $("#log").text("longestidle =" + data);

    });
          
  }

	
	function showstatus () {
    
    $.get("/status", { "from":"<%= client_name %>"}, function(data) {
       var statustext = data;

       if (answeredCallOffered == "Ringing") {
          //agent never answered a Ringing call, set to not ready
          notready();
          answeredCallOffered = "Missed";

       }

       if (data == "NotReady") {
           $("#log").css("background","red")
       }

       if (data == "Ready") {
           $("#log").css("background","green")  
       }

       $("#log").text(data);
    });
	}

/******** GENERAL FUNCTIONS for SFDC  ***********************/

  function cleanInboundTwilioNumber(number) {
      //twilio inbound calls are passed with +1 (number). SFDC only stores 
      return number.replace('+1',''); 
  }

  function cleanFormatting(number) { 
            //changes a SFDC formatted US number, which would be 415-555-1212       
            return number.replace(' ','').replace('-','').replace('(','').replace(')','').replace('+','');
        }


  function startCall(response) { 
            
            //called onClick2dial
            var result = JSON.parse(response.result);  
            var cleanednumber = cleanFormatting(result.number);

            
            //alert("cleanednumber = " + cleanednumber);  
            params = {"PhoneNumber": cleanednumber};
            Twilio.Device.connect(params);
  }

  function saveLog(response) {
            
            console.log("saving log result, response:");
            var result = JSON.parse(response.result);

            console.log(response.result);
            
            var timeStamp = new Date().toString();
            timeStamp = timeStamp.substring(0, timeStamp.lastIndexOf(':') + 3);             
            var currentDate = new Date();           
            var currentDay = currentDate.getDate();
            var currentMonth = currentDate.getMonth()+1;
            var currentYear = currentDate.getFullYear();
            var dueDate = currentYear + '-' + currentMonth + '-' + currentDay;
            var saveParams = 'Subject=' + 'Call on ' + timeStamp;

            saveParams += '&Status=completed';                  
            saveParams += '&CallType=' + 'Inbound';
            saveParams += '&Activitydate=' + dueDate;
            saveParams += '&CallObject=' + currentDate.getTime();
            saveParams += '&Phone=' + callNumber;  //we need to get this from.. somewhere      
            saveParams += '&Description=' + "test description";   

            console.log("About to parse  result..");
            
            var result = JSON.parse(response.result);
            if(result.objectId.substr(0,3) == '003') {
                saveParams += '&whoId=' + result.objectId;                    
            } else {
                saveParams += '&whatId=' + result.objectId;            
            }
            
            console.log("save params = " + saveParams);
            sforce.interaction.saveLog('Task', saveParams);         
        }





    </script>
  </head>
  <body>

    <dif class="agentstatebuttons">
       <div>
        <button class="status" onclick="notready();">
          Not Ready
        </button>

        <button class="status" onclick="ready();">
          Ready
        </button>
    </div>

        <!-- <button class="longestidle" onclick="getlongestidle();">
            Show longestidle
         </button>  
        -->      
      </div>  
    <div id="log">Loading..</div>

 

    <input type="text" id="number" name="number"
      placeholder="Enter a phone number to call"/>  

    <div id="Dialer">
      <div id="dialer-container">
        <div class="numpad-container">
          <div class="number Button" value="1">1</div><div class="number Button" value="2">2</div><div class="number Button" value="3">3</div><div class="number Button" value="4">4</div><div class="number Button" value="5">5</div><div class="number Button" value="6">6</div><div class="number Button" value="7">7</div><div class="number Button" value="8">8</div><div class="number Button" value="9">9</div><div class="number Button" value="*">*</div><div class="number Button" value="0+">0+</div><div class="number Button" value="#">#</div>
        </div>
      </div>
    </div>
  
 
    <button class="call" onclick="call();">
      Call
    </button>

    <button class="call" id="answercall">
      Answer
    </button>


    <button class="hangup" onclick="hangup();">
      Hangup
    </button>

    <div class="logo">
        <a href="http://www.twilio.com/" style="text: decoration: none; display: inline-block; width: 166px; height: 0; overflow: hidden; padding-top: 31px; background: url(http://www.twilio.com/packages/company/img/logos_icon_poweredbysmall.png) no-repeat;  position: fixed; bottom: 5px; margin-right: auto; margin-left: 15px;">powered by twilio™</a>
    </div>

  </body>
</html>